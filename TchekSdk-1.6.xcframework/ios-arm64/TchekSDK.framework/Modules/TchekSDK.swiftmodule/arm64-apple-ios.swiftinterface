// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TchekSDK
import AVFoundation
import CoreMotion
import CryptoKit
import Foundation
import Swift
@_exported import TchekSDK
import UIKit
import _Concurrency
public struct TchekReport : Swift.Equatable {
  public var date: Foundation.Date
  public let dateFirstPicture: Foundation.Date
  public var clientInfo: TchekSDK.TchekReportClientInfo?
  public var signatorySignatureName: Swift.String?
  public var companySignatureName: Swift.String?
  public var signatorySignatureUrl: Swift.String?
  public var companySignatureUrl: Swift.String?
  public static func == (a: TchekSDK.TchekReport, b: TchekSDK.TchekReport) -> Swift.Bool
}
public struct TchekReportClientInfo : Swift.Equatable {
  public var lastName: Swift.String?
  public var firstName: Swift.String?
  public var mail: Swift.String?
  public var phone: Swift.String?
  public var personInCharge: Swift.String?
  public var notes: Swift.String?
  public init(lastName: Swift.String?, firstName: Swift.String?, mail: Swift.String?, phone: Swift.String?, personInCharge: Swift.String?, notes: Swift.String?)
  public static func == (a: TchekSDK.TchekReportClientInfo, b: TchekSDK.TchekReportClientInfo) -> Swift.Bool
}
public struct TchekCompany {
  public let identifier: Swift.String
  public let name: Swift.String
  public let isUk: Swift.Bool
}
public protocol TchekBuyBackFlowDelegate {
  func onBuyBackFlowFinished()
}
public class TchekBuyBackFlowBuilder {
  public init(delegate: TchekSDK.TchekBuyBackFlowDelegate, ui: ((TchekSDK.TchekBuyBackFlowBuilder) -> Swift.Void)? = nil)
  public var bg: UIKit.UIColor
  public var navBarBg: UIKit.UIColor
  public var navBarText: UIKit.UIColor
  public var buyBackFlowText: UIKit.UIColor
  public var btnPrev: UIKit.UIColor
  public var btnPrevDisable: UIKit.UIColor
  public var btnPrevStroke: UIKit.UIColor
  public var btnPrevText: UIKit.UIColor
  public var btnPrevTextDisable: UIKit.UIColor
  public var btnNext: UIKit.UIColor
  public var btnNextDisable: UIKit.UIColor
  public var btnNextStroke: UIKit.UIColor
  public var btnNextText: UIKit.UIColor
  public var btnNextTextDisable: UIKit.UIColor
  public var textFieldPlaceholderText: UIKit.UIColor
  public var textFieldPlaceholderTextSelected: UIKit.UIColor
  public var textFieldUnderline: UIKit.UIColor
  public var textFieldUnderlineSelected: UIKit.UIColor
  public var textFieldText: UIKit.UIColor
  public var radioButton: UIKit.UIColor
  public var radioButtonSelected: UIKit.UIColor
  public var radioButtonBg: UIKit.UIColor
  public var radioButtonBgSelected: UIKit.UIColor
  public var radioButtonBgStroke: UIKit.UIColor
  public var radioButtonBgStrokeSelected: UIKit.UIColor
  public var listSeparator: UIKit.UIColor
  public var mechanicalCheckButton: UIKit.UIColor
  public var mechanicalCheckButtonSelected: UIKit.UIColor
  public var mechanicalCheckButtonStroke: UIKit.UIColor
  public var mechanicalCheckButtonStrokeSelected: UIKit.UIColor
  public var mechanicalCheckButtonText: UIKit.UIColor
  public var mechanicalCheckButtonTextSelected: UIKit.UIColor
  @objc deinit
}
public struct TchekUser {
  public let username: Swift.String
}
public struct TchekScan {
  public let id: Swift.String
  public let tchekCreatedAt: Foundation.Date
  public let shortId: Swift.String?
  public let type: TchekSDK.TchekScanType
  public let status: TchekSDK.TchekScanStatus
  public let thumbnailUrl: Swift.String?
  public let canCompare: Swift.Bool
  public let previousTchekCreatedAt: Foundation.Date?
  public let previousTchekId: Swift.String?
  public let device: TchekSDK.TchekDevice?
  public let numberDamage: Swift.Int
  public let numberNewDamage: Swift.Int?
  public let damageControl: Swift.Int
  public let scanSync: Swift.Bool
  public let uploadDamagesPictures: Swift.Bool
  public let detectionFinished: Swift.Bool
  public let detectionInProgress: Swift.Bool
  public let inspected: Swift.Bool
  public let vehicle: TchekSDK.TchekVehicle?
  public let user: TchekSDK.TchekUser?
  public let company: TchekSDK.TchekCompany?
  public var damagesAuto: [TchekSDK.TchekDamage]
  public var damagesNotAuto: [TchekSDK.TchekDamage]
  public let imagesShootInspect: [TchekSDK.TchekImage]
  public let imagesExternal: [TchekSDK.TchekImage]
  public let report: TchekSDK.TchekReport?
  public let reportUrl: Swift.String?
  public var repairCosts: [TchekSDK.TchekRepairCost]
  public let thirdPartyStatus: TchekSDK.TchekThirdPartyStatus?
  public let thirdPartyReport: TchekSDK.TchekThirdPartyReport?
}
public protocol TchekShootInspectDelegate {
  func onDetectionEnd(tchekScan: TchekSDK.TchekScan, immatriculation: Swift.String?)
}
public class TchekShootInspectBuilder {
  public init(delegate: TchekSDK.TchekShootInspectDelegate, immatriculation: Swift.String? = nil, ui: ((TchekSDK.TchekShootInspectBuilder) -> Swift.Void)? = nil)
  public var thumbBg: UIKit.UIColor
  public var thumbBorder: UIKit.UIColor
  public var thumbBorderBadImage: UIKit.UIColor
  public var thumbBorderGoodImage: UIKit.UIColor
  public var thumbDot: UIKit.UIColor
  public var thumbBorderThickness: CoreGraphics.CGFloat {
    get
    set
  }
  public var thumbCorner: CoreGraphics.CGFloat
  public var btnTuto: UIKit.UIColor
  public var btnTutoText: UIKit.UIColor
  public var tutoPageIndicatorDot: UIKit.UIColor
  public var tutoPageIndicatorDotSelected: UIKit.UIColor
  public var carOverlayGuide: UIKit.UIColor
  public var btnRetake: UIKit.UIColor
  public var btnRetakeText: UIKit.UIColor
  public var previewBg: UIKit.UIColor
  public var endBg: UIKit.UIColor
  public var endNavBarBg: UIKit.UIColor
  public var endNavBarText: UIKit.UIColor
  public var endText: UIKit.UIColor
  public var btnEndNext: UIKit.UIColor
  public var btnEndNextText: UIKit.UIColor
  @objc deinit
}
public struct TchekVehicle : Swift.Equatable {
  public let id: Swift.String
  public var immat: Swift.String?
  public var brand: Swift.String?
  public var model: Swift.String?
  public var vin: Swift.String?
  public var color: Swift.String?
  public static func == (a: TchekSDK.TchekVehicle, b: TchekSDK.TchekVehicle) -> Swift.Bool
}
public protocol TchekBuyBackManager {
  func getThirdPartyAvailable() -> [TchekSDK.TchekThirdParty]
  func thirdPartyActivated(tchekThirdParty: TchekSDK.TchekThirdParty) -> Swift.Bool
  func loginPVO2(login: Swift.String, pass: Swift.String, onFailure: @escaping (TchekSDK.TchekError) -> Swift.Void, onSuccess: @escaping () -> Swift.Void)
  func verifyPVO2Credentials(onFailure: @escaping (TchekSDK.TchekError) -> Swift.Void, onSuccess: @escaping () -> Swift.Void)
  func logoutPVO2(onFailure: @escaping (TchekSDK.TchekError) -> Swift.Void, onSuccess: @escaping () -> Swift.Void)
  func buyBackFlowPVO2(builder: TchekSDK.TchekBuyBackFlowBuilder, shootInspectBuilder: TchekSDK.TchekShootInspectBuilder) -> UIKit.UIViewController
}
@_hasMissingDesignatedInitializers public class TchekSdk {
  public static var VERSION: Swift.String
  public static func configure(key: Swift.String, builder: TchekSDK.TchekBuilder, onCompletion: @escaping () -> Swift.Void)
  public static func configure(keySSO: Swift.String, builder: TchekSDK.TchekBuilder, onCompletion: @escaping (Swift.String?) -> Swift.Void)
  public static func loadAllTchek(type: TchekSDK.TchekScanType?, deviceId: Swift.String?, search: Swift.String?, limit: Swift.Int, page: Swift.Int, onFailure: @escaping (TchekSDK.TchekError) -> Swift.Void, onSuccess: @escaping ([TchekSDK.TchekScanLite]) -> Swift.Void)
  public static func getReportUrl(tchekId: Swift.String, validity: Swift.Int?, cost: Swift.Bool, onFailure: @escaping (TchekSDK.TchekError) -> Swift.Void, onSuccess: @escaping (Swift.String) -> Swift.Void)
  public static func shootInspect(builder: TchekSDK.TchekShootInspectBuilder) -> UIKit.UIViewController
  public static func shootInspectEnd(tchekId: Swift.String, builder: TchekSDK.TchekShootInspectBuilder) -> UIKit.UIViewController
  public static func fastTrack(builder: TchekSDK.TchekFastTrackBuilder) -> UIKit.UIViewController
  public static func report(builder: TchekSDK.TchekReportBuilder) -> UIKit.UIViewController
  public static func deleteTchek(tchekId: Swift.String, onFailure: @escaping () -> Swift.Void, onSuccess: @escaping () -> Swift.Void)
  public static func buyBackManager() -> TchekSDK.TchekBuyBackManager
  public static func socketManager(type: TchekSDK.TchekScanType, device: TchekSDK.TchekDevice?) -> TchekSDK.TchekSocketManager?
  @objc deinit
}
public enum TchekScanStatus {
  case notInspected, draft, completed
  public static func == (a: TchekSDK.TchekScanStatus, b: TchekSDK.TchekScanStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TchekDevice {
  public let id: Swift.String
  public let serialNumber: Swift.String
  public let baseUrl: Swift.String?
  public let mode: TchekSDK.TchekDeviceMode
}
public enum TchekThirdPartyStatus : Swift.Int {
  case error, draft, send
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TchekThirdParty : Swift.String, Swift.CaseIterable {
  case pvo2
  public init?(rawValue: Swift.String)
  public typealias AllCases = [TchekSDK.TchekThirdParty]
  public typealias RawValue = Swift.String
  public static var allCases: [TchekSDK.TchekThirdParty] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CreateReportEmitter : TchekSDK.TchekEmitterListener {
  public init(createReport: @escaping (_ tchek: TchekSDK.TchekScan) -> ())
  @objc deinit
}
public struct TchekImage {
  public let id: Swift.String
  public let tchekId: Swift.String
  public let createdAt: Foundation.Date
  public let url: Swift.String
  public let width: Swift.Int
  public let height: Swift.Int
  public let metadata: TchekSDK.TchekImageMetadata?
}
public struct TchekImageMetadata {
  public let angle: Swift.Int
}
public struct TchekSSO {
  public let token: Swift.String
  public let expired: Swift.Bool
  public let tchekSSOAccess: [TchekSDK.TchekSSOAccess]
  public let tchekId: Swift.String?
}
public enum TchekSSOAccess {
  case ShootInspect, FastTrack, Report
  public static func == (a: TchekSDK.TchekSSOAccess, b: TchekSDK.TchekSSOAccess) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TchekEmitterListener {
  @objc deinit
}
public protocol TchekSocketManager {
  func destroy()
  func subscribe(_ subscriber: TchekSDK.TchekEmitterListener)
  func unsubscribe(_ subscriber: TchekSDK.TchekEmitterListener)
  func unsubscribe(_ socketEvent: TchekSDK.SocketEvent)
  func unsubscribeAll()
}
public enum SocketEvent : Swift.String, Swift.CaseIterable {
  case newTchek, detectionFinished, createReport, deleteTchek
  public init?(rawValue: Swift.String)
  public typealias AllCases = [TchekSDK.SocketEvent]
  public typealias RawValue = Swift.String
  public static var allCases: [TchekSDK.SocketEvent] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct TchekDamage {
  public let id: Swift.String
  public let confidence: TchekSDK.TchekDamageConfidence?
  public let type: Swift.String?
  public let severity: Swift.String?
  public var isDeleted: Swift.Bool
  public let location: Swift.String?
  public let svgLocation: Swift.Int?
  public let svgLocationArray: Swift.Array<Swift.Int>?
  public let isAuto: Swift.Bool
  public let listRoi: [TchekSDK.TchekRoi]
  public let bestRoi: TchekSDK.TchekRoi
  public let isNew: Swift.Bool
}
public enum TchekBuyBackFlowStep : Swift.Int, Swift.CaseIterable {
  case id, vehicle, usageData, options, tires, mechanic, end
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [TchekSDK.TchekBuyBackFlowStep]
  public typealias RawValue = Swift.Int
  public static var allCases: [TchekSDK.TchekBuyBackFlowStep] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol TchekError {
  var errorMsg: Swift.String { get }
  var isTokenError: Swift.Bool { get }
  var isTokenSSOError: Swift.Bool { get }
  var raw: Swift.Int { get }
  var description: Swift.String { get }
}
public class TchekBuilder {
  public init(userId: Swift.String? = nil, ui: ((TchekSDK.TchekBuilder) -> Swift.Void))
  public var alertButtonText: UIKit.UIColor
  public var accentColor: UIKit.UIColor
  @objc deinit
}
public struct TchekThirdPartyReport {
}
@_hasMissingDesignatedInitializers public class DeleteTchekEmitter : TchekSDK.TchekEmitterListener {
  public init(deleteTchek: @escaping (_ tchekId: Swift.String) -> ())
  @objc deinit
}
public struct TchekScanLite {
  public let id: Swift.String
  public let tchekCreatedAt: Foundation.Date
  public let type: TchekSDK.TchekScanType
  public let status: TchekSDK.TchekScanStatus
  public let thumbnailUrl: Swift.String?
  public let detectionFinished: Swift.Bool
  public let detectionInProgress: Swift.Bool
  public let inspected: Swift.Bool
  public let numberDamage: Swift.Int
  public let numberNewDamage: Swift.Int?
  public let damageControl: Swift.Int
  public let scanSync: Swift.Bool
  public let uploadDamagesPictures: Swift.Bool
  public let vehicle: TchekSDK.TchekVehicle?
  public let user: TchekSDK.TchekUser?
  public let company: TchekSDK.TchekCompany?
  public let device: TchekSDK.TchekDevice?
  public let thirdPartyStatus: TchekSDK.TchekThirdPartyStatus?
}
public enum TchekScanType {
  case mobile, device
  public static func == (a: TchekSDK.TchekScanType, b: TchekSDK.TchekScanType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TchekRepairCost : Swift.Equatable {
  public var costType: Swift.String
  public var cost: Swift.Float
  public static func == (a: TchekSDK.TchekRepairCost, b: TchekSDK.TchekRepairCost) -> Swift.Bool
}
public enum TchekDeviceMode : Swift.Int {
  case local, distant, hybrid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol TchekFastTrackDelegate {
  func onReportCreated(tchekScan: TchekSDK.TchekScan)
}
public class TchekFastTrackBuilder {
  public init(tchekId: Swift.String, tchekReportClientInfo: TchekSDK.TchekReportClientInfo? = nil, delegate: TchekSDK.TchekFastTrackDelegate, ui: ((TchekSDK.TchekFastTrackBuilder) -> Swift.Void)? = nil)
  public var fastTrackBg: UIKit.UIColor
  public var damagesListBg: UIKit.UIColor
  public var navBarBg: UIKit.UIColor
  public var navBarText: UIKit.UIColor
  public var cardBg: UIKit.UIColor
  public var pageIndicatorDot: UIKit.UIColor
  public var pageIndicatorDotSelected: UIKit.UIColor
  public var damageConfidence0: UIKit.UIColor
  public var damageConfidenceText0: UIKit.UIColor
  public var damageConfidence1: UIKit.UIColor
  public var damageConfidenceText1: UIKit.UIColor
  public var damageConfidence2: UIKit.UIColor
  public var damageConfidenceText2: UIKit.UIColor
  public var damageType: UIKit.UIColor
  public var damageTypeText: UIKit.UIColor
  public var damageLocation: UIKit.UIColor
  public var damageLocationText: UIKit.UIColor
  public var damageDate: UIKit.UIColor
  public var damageDateText: UIKit.UIColor
  public var damageNew: UIKit.UIColor
  public var damageNewText: UIKit.UIColor
  public var damageOld: UIKit.UIColor
  public var damageOldText: UIKit.UIColor
  public var fastTrackText: UIKit.UIColor
  public var damagesListText: UIKit.UIColor
  public var damageCellText: UIKit.UIColor
  public var damageCellBorder: UIKit.UIColor
  public var vehiclePatternStroke: UIKit.UIColor
  public var vehiclePatternDamageFill: UIKit.UIColor
  public var vehiclePatternOldDamageFill: UIKit.UIColor
  public var vehiclePatternDamageStroke: UIKit.UIColor
  public var btnAddExtraDamage: UIKit.UIColor
  public var btnAddExtraDamageText: UIKit.UIColor
  public var btnCreateReport: UIKit.UIColor
  public var btnCreateReportText: UIKit.UIColor
  public var btnValidateExtraDamage: UIKit.UIColor
  public var btnValidateExtraDamageText: UIKit.UIColor
  public var btnDeleteExtraDamage: UIKit.UIColor
  public var btnDeleteExtraDamageText: UIKit.UIColor
  public var btnEditDamage: UIKit.UIColor
  public var btnEditDamageText: UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NewTchekEmitter : TchekSDK.TchekEmitterListener {
  public init(newTchek: @escaping (_ tchek: TchekSDK.TchekScan) -> ())
  @objc deinit
}
public protocol TchekReportDelegate {
  func onReportUpdate(tchekScan: TchekSDK.TchekScan)
}
public class TchekReportBuilder {
  public init(tchekId: Swift.String, delegate: TchekSDK.TchekReportDelegate, ui: ((TchekSDK.TchekReportBuilder) -> Swift.Void)? = nil)
  public var bg: UIKit.UIColor
  public var navBarBg: UIKit.UIColor
  public var navBarText: UIKit.UIColor
  public var reportText: UIKit.UIColor
  public var btnPrevText: UIKit.UIColor
  public var btnPrev: UIKit.UIColor
  public var btnNextText: UIKit.UIColor
  public var btnNext: UIKit.UIColor
  public var pagingBg: UIKit.UIColor
  public var pagingText: UIKit.UIColor
  public var pagingTextSelected: UIKit.UIColor
  public var pagingIndicator: UIKit.UIColor
  public var textFieldPlaceholderText: UIKit.UIColor
  public var textFieldPlaceholderTextSelected: UIKit.UIColor
  public var textFieldUnderline: UIKit.UIColor
  public var textFieldUnderlineSelected: UIKit.UIColor
  public var textFieldText: UIKit.UIColor
  public var damageCellBorder: UIKit.UIColor
  public var damageCellText: UIKit.UIColor
  public var vehiclePatternStroke: UIKit.UIColor
  public var vehiclePatternDamageFill: UIKit.UIColor
  public var vehiclePatternOldDamageFill: UIKit.UIColor
  public var vehiclePatternDamageStroke: UIKit.UIColor
  public var damageType: UIKit.UIColor
  public var damageTypeText: UIKit.UIColor
  public var damageLocation: UIKit.UIColor
  public var damageLocationText: UIKit.UIColor
  public var damageDate: UIKit.UIColor
  public var damageDateText: UIKit.UIColor
  public var damageNew: UIKit.UIColor
  public var damageNewText: UIKit.UIColor
  public var damageOld: UIKit.UIColor
  public var damageOldText: UIKit.UIColor
  public var btnValidateSignature: UIKit.UIColor
  public var btnValidateSignatureText: UIKit.UIColor
  public var newDamageBtnDateBorder: UIKit.UIColor
  public var newDamageSectionText: UIKit.UIColor
  public var newDamageCellText: UIKit.UIColor
  public var newDamageOldCompareButton: UIKit.UIColor
  public var newDamageOldCompareButtonText: UIKit.UIColor
  public var newDamageOldCancelButton: UIKit.UIColor
  public var newDamageOldTitle: UIKit.UIColor
  public var newDamageOldText: UIKit.UIColor
  public var repairCostCellCostBg: UIKit.UIColor
  public var repairCostCellCostText: UIKit.UIColor
  public var repairCostCellText: UIKit.UIColor
  public var repairCostCellCircleDamageCountBg: UIKit.UIColor
  public var repairCostCellCircleDamageCountText: UIKit.UIColor
  public var repairCostBtnCostSettingsText: UIKit.UIColor
  public var repairCostBtnCostSettings: UIKit.UIColor
  public var repairCostSettingsText: UIKit.UIColor
  public var btnValidateRepairCostEdit: UIKit.UIColor
  public var btnValidateRepairCostEditText: UIKit.UIColor
  public var extraDamageBg: UIKit.UIColor
  public var btnValidateExtraDamage: UIKit.UIColor
  public var btnValidateExtraDamageText: UIKit.UIColor
  public var btnDeleteExtraDamage: UIKit.UIColor
  public var btnDeleteExtraDamageText: UIKit.UIColor
  public var btnEditDamage: UIKit.UIColor
  public var btnEditDamageText: UIKit.UIColor
  public var buyBackSectionCellBg: UIKit.UIColor
  public var buyBackSectionCellText: UIKit.UIColor
  public var buyBackCellBg: UIKit.UIColor
  public var buyBackCellText: UIKit.UIColor
  public var buyBackCheckboxButton: UIKit.UIColor
  public var buyBackCheckboxButtonSelected: UIKit.UIColor
  public var buyBackListSeparator: UIKit.UIColor
  @objc deinit
}
public enum TchekDamageConfidence : Swift.CaseIterable {
  case low, medium, high
  public static func == (a: TchekSDK.TchekDamageConfidence, b: TchekSDK.TchekDamageConfidence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [TchekSDK.TchekDamageConfidence]
  public static var allCases: [TchekSDK.TchekDamageConfidence] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DetectionFinishedEmitter : TchekSDK.TchekEmitterListener {
  public init(detectionFinished: @escaping (_ tchek: TchekSDK.TchekScan) -> ())
  @objc deinit
}
public struct TchekRoi {
  public let id: Swift.String
  public let centerX: Swift.Float
  public let centerY: Swift.Float
  public let width: Swift.Float
  public let height: Swift.Float
  public let image: TchekSDK.TchekImage
}
extension TchekSDK.TchekScanStatus : Swift.Equatable {}
extension TchekSDK.TchekScanStatus : Swift.Hashable {}
extension TchekSDK.TchekThirdPartyStatus : Swift.Equatable {}
extension TchekSDK.TchekThirdPartyStatus : Swift.Hashable {}
extension TchekSDK.TchekThirdPartyStatus : Swift.RawRepresentable {}
extension TchekSDK.TchekThirdParty : Swift.Equatable {}
extension TchekSDK.TchekThirdParty : Swift.Hashable {}
extension TchekSDK.TchekThirdParty : Swift.RawRepresentable {}
extension TchekSDK.TchekSSOAccess : Swift.Equatable {}
extension TchekSDK.TchekSSOAccess : Swift.Hashable {}
extension TchekSDK.SocketEvent : Swift.Equatable {}
extension TchekSDK.SocketEvent : Swift.Hashable {}
extension TchekSDK.SocketEvent : Swift.RawRepresentable {}
extension TchekSDK.TchekBuyBackFlowStep : Swift.Equatable {}
extension TchekSDK.TchekBuyBackFlowStep : Swift.Hashable {}
extension TchekSDK.TchekBuyBackFlowStep : Swift.RawRepresentable {}
extension TchekSDK.TchekScanType : Swift.Equatable {}
extension TchekSDK.TchekScanType : Swift.Hashable {}
extension TchekSDK.TchekDeviceMode : Swift.Equatable {}
extension TchekSDK.TchekDeviceMode : Swift.Hashable {}
extension TchekSDK.TchekDeviceMode : Swift.RawRepresentable {}
extension TchekSDK.TchekDamageConfidence : Swift.Equatable {}
extension TchekSDK.TchekDamageConfidence : Swift.Hashable {}
